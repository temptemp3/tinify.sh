#!/bin/bash
## tinify
## - tinifies images
## version 0.0.2 - use local cache
##################################################
. ${SH2}/error.sh 		 # error handling 
. ${SH2}/aliases/commands.sh	 # commands
. ${SH2}/cecho.sh		 # colored echo
#-------------------------------------------------
. ${SH2}/cache.sh		 # caching
cache=./cache/tinify		 # set cache path
test -d "${cache}" || {		 # init cache path
 mkdir -pv "${cache}"		 #
}				 #
#-------------------------------------------------
. ${SH2}/sanitize.sh 2>/dev/null # sanitization
##################################################
car() {
 echo ${1}
}
file-info() { { local infile ; infile="${1}" ; }
 test "${infile}"
 file ${infile}
 du -d 0 -b ${infile}
}
tinify-image() { { local infile ; infile="${1}" ; }
 shrink-image() { # returns response to compression
   shrink-image-payload() {
    cecho green "uploading file for compression ..."
    {
      tinify-api-shrink ${infile}
    } 
   }
   {
     cache \
     "${cache}/${FUNCNAME}-${candidate_key}" \
     "${FUNCNAME}-payload"
   }
 }
 setup-compression() {
   cecho green setting up compression ...
   compression_count=$( cat header | grep -e 'Compression-Count' | cut '-d:' '-f2' )
   compression_output_url=$( cat response | jq '.output.url' | cut '-d"' '-f2' )
   compression_in_size=$( cat response | jq '.input.size' | cut '-d"' '-f2' )
   compression_in_type=$( cat response | jq '.input.type' | cut '-d"' '-f2' )
   compression_out_size=$( cat response | jq '.output.size' | cut '-d"' '-f2' )
   compression_out_type=$( cat response | jq '.output.type' | cut '-d"' '-f2' )
   compression_ratio=$( cat response | jq '.output.ratio' | cut '-d"' '-f2' )
   compression_size_diff=$(( ${compression_out_size} - ${compression_in_size} ))
   cecho green compression setup
 }
 {
   local compression_count
   local compression_output_url
   local compression_in_type
   local compression_out_size
   local compression_out_type
   local compression_ratio
   local compression_size_diff
   local compression_count
 }
 {
   local candidate_key
   candidate_key=$( sanitize $( sha1sum ${infile} ) )
   cecho yellow candidate_key: ${candidate_key}
 }
 test -f "${infile}" || { 
   {
     echo file missing 
   } 1>&2
   false
 }
 { # > response
   shrink-image 
 } | tee response 
 setup-compression
 cecho green "downloading compression output ..."
 {
   tinify-api-output ${compression_output_url}
 } | tee response
 compression_count=$( cat header | grep -e 'Compression-Count' | cut '-d:' '-f2' )
 cecho yellow compression_count: ${compression_count}
 cecho yellow BEFORE $( file-info ${infile} )
 cecho yellow AFTER $( file-info optimized.jpg )
 cecho yellow compression_ratio: ${compression_ratio}
 true
}
tinify() {
 . $( dirname ${0} )/config.sh 2>/dev/null || {
   {
     echo missing config
   } 1>&2
   false
 }
 test "${API_KEY}"
 . $( dirname ${0} )/${FUNCNAME}-api.sh 
 commands
}
##################################################
if [ ! ] 
then
 true
else
 exit 1 # wrong args
fi
##################################################
tinify ${@}
##################################################
## generated by create-stub2.sh v0.1.1
## on Wed, 14 Nov 2018 11:36:46 +0900
## see <https://github.com/temptemp3/sh2>
##################################################
